{"version":3,"sources":["pomodoro.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Length","title","changeTime","type","time","formatTime","className","id","onClick","App","useState","Audio","beepSound","displayTime","setDisplayTime","breakTime","setBreakTime","sessionTime","setSessionTime","timerOn","setTimerOn","onBreak","setOnBreak","useEffect","play","minutes","Math","floor","seconds","padStart","src","pomodoro","alt","Date","getTime","nextDate","interval","setInterval","prev","localStorage","clear","setItem","clearInterval","JSON","parse","getItem","pause","currentTime","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qMAAe,G,MAAA,IAA0B,sC,OCuJnCA,EAAoB,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,WAAYC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,WAC1D,OACE,sBAAKC,UAAU,mBAAf,UACE,qBAAKC,GAAE,UAAKJ,EAAL,UAAP,SAA2BF,IAC3B,sBAAKK,UAAU,aAAf,UACE,wBACEC,GAAE,UAAKJ,EAAL,cACFG,UAAU,yBACVE,QAAS,kBAAMN,EAAWC,GAAO,KAHnC,SAKE,mBAAGG,UAAU,iBAAb,8BAEF,qBAAKC,GAAE,UAAKJ,EAAL,WAAP,SAA4BE,EAAWD,KACvC,wBACEG,GAAE,UAAKJ,EAAL,cACFG,UAAU,yBACVE,QAAS,kBAAMN,EAAWC,EAAM,KAHlC,SAKE,mBAAGG,UAAU,iBAAb,mCAOKG,EAjKC,WACd,MAAkCC,mBAAS,IAAIC,MAHjD,8GAGE,mBAAOC,EAAP,KACA,GADA,KACsCF,mBAAS,OAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAkCJ,mBAAS,KAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAsCN,mBAAS,MAA/C,mBAAOO,EAAP,KAAoBC,EAApB,KACA,EAA8BR,oBAAS,GAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KACA,EAA8BV,oBAAS,GAAvC,mBAAOW,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACY,IAAhBV,IACFD,EAAUY,OACLH,GAIHP,EAAeG,GACfK,GAAW,KAJXR,EAAeC,GACfO,GAAW,OAMd,CAACT,IAEJ,IAAMR,EAAa,SAACD,GAClB,IAAIqB,EAAUC,KAAKC,MAAMvB,EAAO,IAAM,GAClCwB,EAAWxB,EAAO,GAAM,GAE5B,MAAM,GAAN,OAAUqB,EAAQI,SAAS,EAAG,KAA9B,YAAsCD,EAAQC,SAAS,EAAG,OAGtD3B,EAAa,SAACC,EAAcC,GAChC,GAAa,UAATD,EAAkB,CACpB,GAAIY,GAAa,IAAMX,EAAO,EAC5B,OAEF,GAAIW,GAAa,KACf,OAEFC,EAAaD,EAAYX,OACpB,CACL,GAAIa,GAAe,IAAMb,EAAO,EAC9B,OAEF,GAAIa,GAAe,KACjB,OAEFC,EAAeD,EAAcb,GACxBe,GACHL,EAAeG,EAAcb,KAuCnC,OACE,sBAAKE,UAAU,eAAf,UACE,oBAAIA,UAAU,QAAd,4BACA,qBAAKwB,IAAKC,EAAUC,IAAI,iBAAiB1B,UAAU,yBACnD,cAAC,EAAD,CACEL,MAAO,eACPC,WAAYA,EACZC,KAAM,QACNC,KAAMW,EACNV,WAAYA,IAGd,sBAAKC,UAAU,kBAAf,UACE,qBAAKA,UAAU,gBAAf,SACGe,EAAU,cAAgB,eAE7B,qBAAKd,GAAG,cAAR,wBACA,qBAAKA,GAAG,YAAYD,UAAU,QAA9B,SACGD,EAAWQ,KAEd,wBACEN,GAAG,aACHD,UAAU,oCACVE,QAzDY,YACP,IAAIyB,MAAOC,UAAtB,IACIC,GAAW,IAAIF,MAAOC,UAAY,IACtC,IAAKf,EAAS,CACZ,IAAIiB,EAAgBC,aAAY,YACvB,IAAIJ,MAAOC,UACPC,IACTrB,GAAe,SAACwB,GACd,OAAOA,EAAO,KAEhBH,GAAY,OAEb,IACHI,aAAaC,QACbD,aAAaE,QAAQ,cAAeL,GAElCjB,GACFuB,cAAcC,KAAKC,MAAML,aAAaM,QAAQ,gBAAkB,OAGlEzB,GAAYD,IAkCR,SAKGA,EACC,mBAAGb,UAAU,iBAAb,mBAEA,mBAAGA,UAAU,iBAAb,0BAGJ,wBACEC,GAAG,QACHD,UAAU,oCACVE,QA7CU,WAChBI,EAAUkC,QACVlC,EAAUmC,YAAc,EACxBjC,EAAe,MACfE,EAAa,KACbE,EAAe,MACfE,GAAW,GACXsB,cAAcC,KAAKC,MAAML,aAAaM,QAAQ,gBAAkB,QAmC5D,SAKE,mBAAGvC,UAAU,iBAAb,4BAIJ,cAAC,EAAD,CACEL,MAAO,iBACPC,WAAYA,EACZC,KAAM,UACNC,KAAMa,EACNZ,WAAYA,QCnIL2C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.0b212018.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/pomodoro.f308c098.png\";","import React, { FC, useState, useEffect } from \"react\"\r\nimport \"./styles.scss\"\r\nimport pomodoro from \"./pomodoro.png\"\r\n\r\ninterface Props {\r\n  title: string\r\n  changeTime: (type: string, time: number) => void\r\n  type: string\r\n  time: number\r\n  formatTime: (time: number) => string\r\n}\r\n\r\nconst soundUrl: string =\r\n\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"\r\n\r\nconst App: FC = () => {\r\n  const [beepSound, setBeepSound] = useState(new Audio(soundUrl))\r\n  const [displayTime, setDisplayTime] = useState(25 * 60)\r\n  const [breakTime, setBreakTime] = useState(5 * 60)\r\n  const [sessionTime, setSessionTime] = useState(25 * 60)\r\n  const [timerOn, setTimerOn] = useState(false)\r\n  const [onBreak, setOnBreak] = useState(false)\r\n\r\n  useEffect((): void => {\r\n    if (displayTime === 0) {\r\n      beepSound.play()\r\n      if (!onBreak) {\r\n        setDisplayTime(breakTime)\r\n        setOnBreak(true)\r\n      } else {\r\n        setDisplayTime(sessionTime)\r\n        setOnBreak(false)\r\n      }\r\n    }\r\n  }, [displayTime])\r\n\r\n  const formatTime = (time: number): string => {\r\n    let minutes = Math.floor(time / 60) + \"\"\r\n    let seconds = (time % 60) + \"\"\r\n\r\n    return `${minutes.padStart(2, \"0\")}:${seconds.padStart(2, \"0\")}`\r\n  }\r\n\r\n  const changeTime = (type: string, time: number): void => {\r\n    if (type === \"break\") {\r\n      if (breakTime <= 60 && time < 0) {\r\n        return\r\n      }\r\n      if (breakTime >= 60 * 60) {\r\n        return\r\n      }\r\n      setBreakTime(breakTime + time)\r\n    } else {\r\n      if (sessionTime <= 60 && time < 0) {\r\n        return\r\n      }\r\n      if (sessionTime >= 60 * 60) {\r\n        return\r\n      }\r\n      setSessionTime(sessionTime + time)\r\n      if (!timerOn) {\r\n        setDisplayTime(sessionTime + time)\r\n      }\r\n    }\r\n  }\r\n\r\n  const controlTime = (): void => {\r\n    let date = new Date().getTime()\r\n    let nextDate = new Date().getTime() + 1000\r\n    if (!timerOn) {\r\n      let interval: any = setInterval(() => {\r\n        date = new Date().getTime()\r\n        if (date > nextDate) {\r\n          setDisplayTime((prev) => {\r\n            return prev - 1\r\n          })\r\n          nextDate += 1000\r\n        }\r\n      }, 30)\r\n      localStorage.clear()\r\n      localStorage.setItem(\"interval-id\", interval)\r\n    }\r\n    if (timerOn) {\r\n      clearInterval(JSON.parse(localStorage.getItem(\"interval-id\") || \"{}\"))\r\n    }\r\n\r\n    setTimerOn(!timerOn)\r\n  }\r\n\r\n  const resetTime = () => {\r\n    beepSound.pause()\r\n    beepSound.currentTime = 0\r\n    setDisplayTime(25 * 60)\r\n    setBreakTime(5 * 60)\r\n    setSessionTime(25 * 60)\r\n    setTimerOn(false)\r\n    clearInterval(JSON.parse(localStorage.getItem(\"interval-id\") || \"{}\"))\r\n    return\r\n  }\r\n\r\n  return (\r\n    <div className=\"page-wrapper\">\r\n      <h1 className=\"title\">Pomodoro Clock</h1>\r\n      <img src={pomodoro} alt=\"Pomodoro Timer\" className=\"image responsive-img\" />\r\n      <Length\r\n        title={\"Break Length\"}\r\n        changeTime={changeTime}\r\n        type={\"break\"}\r\n        time={breakTime}\r\n        formatTime={formatTime}\r\n      />\r\n\r\n      <div className=\"timer-container\">\r\n        <div className=\"break-message\">\r\n          {onBreak ? \"Break time!\" : \"Work time!\"}\r\n        </div>\r\n        <div id=\"timer-label\">Time left:</div>\r\n        <div id=\"time-left\" className=\"timer\">\r\n          {formatTime(displayTime)}\r\n        </div>\r\n        <button\r\n          id=\"start_stop\"\r\n          className=\"play-pause btn-small red darken-1\"\r\n          onClick={controlTime}\r\n        >\r\n          {timerOn ? (\r\n            <i className=\"material-icons\">pause</i>\r\n          ) : (\r\n            <i className=\"material-icons\">play_arrow</i>\r\n          )}\r\n        </button>\r\n        <button\r\n          id=\"reset\"\r\n          className=\"play-pause btn-small red darken-1\"\r\n          onClick={resetTime}\r\n        >\r\n          <i className=\"material-icons\">autorenew</i>\r\n        </button>\r\n      </div>\r\n\r\n      <Length\r\n        title={\"Session Length\"}\r\n        changeTime={changeTime}\r\n        type={\"session\"}\r\n        time={sessionTime}\r\n        formatTime={formatTime}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Length: FC<Props> = ({ title, changeTime, type, time, formatTime }) => {\r\n  return (\r\n    <div className=\"length-container\">\r\n      <div id={`${type}-label`}>{title}</div>\r\n      <div className=\"time-boxes\">\r\n        <button\r\n          id={`${type}-decrement`}\r\n          className=\"btn-small red darken-1\"\r\n          onClick={() => changeTime(type, -60)}\r\n        >\r\n          <i className=\"material-icons\">arrow_downward</i>\r\n        </button>\r\n        <div id={`${type}-length`}>{formatTime(time)}</div>\r\n        <button\r\n          id={`${type}-increment`}\r\n          className=\"btn-small red darken-1\"\r\n          onClick={() => changeTime(type, 60)}\r\n        >\r\n          <i className=\"material-icons\">arrow_upward</i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}