{"version":3,"sources":["pomodoro.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Length","title","changeTime","type","time","formatTime","className","onClick","App","useState","displayTime","setDisplayTime","breakTime","setBreakTime","sessionTime","setSessionTime","timerOn","minutes","Math","floor","seconds","padStart","controlTime","Date","getTime","nextDate","setInterval","prev","src","pomodoro","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qMAAe,G,MAAA,IAA0B,sC,OC4GnCA,EAAoB,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,WAAYC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,WAC1D,OACE,sBAAKC,UAAU,mBAAf,UACE,8BAAML,IACN,sBAAKK,UAAU,aAAf,UACE,wBACEA,UAAU,yBACVC,QAAS,kBAAML,EAAWC,GAAO,KAFnC,SAIE,mBAAGG,UAAU,iBAAb,8BAEF,8BAAMD,EAAWD,KACjB,wBACEE,UAAU,yBACVC,QAAS,kBAAML,EAAWC,EAAM,KAFlC,SAIE,mBAAGG,UAAU,iBAAb,mCAOKE,EAvHC,WACd,MAAsCC,mBAAS,MAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAkCF,mBAAS,KAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAsCJ,mBAAS,MAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KACA,EAA8BN,oBAAS,GAAvC,mBAAOO,EAAP,KACA,GADA,KAC8BP,oBAAS,IAAvC,mBAEMJ,GAFN,UAEmB,SAACD,GAClB,IAAIa,EAAUC,KAAKC,MAAMf,EAAO,IAAM,GAClCgB,EAAWhB,EAAO,GAAM,GAE5B,MAAM,GAAN,OAAUa,EAAQI,SAAS,EAAG,KAA9B,YAAsCD,EAAQC,SAAS,EAAG,QAGtDnB,EAAa,SAACC,EAAcC,GAChC,GAAa,UAATD,EAAkB,CACpB,GAAIS,GAAa,IAAMR,EAAO,EAC5B,OAEFS,EAAaD,EAAYR,OACpB,CACL,GAAIU,GAAe,IAAMV,EAAO,EAC9B,OAEFW,EAAeD,EAAcV,GACxBY,GACHL,EAAeG,EAAcV,KAK7BkB,EAAc,YACP,IAAIC,MAAOC,UAAtB,IACIC,GAAW,IAAIF,MAAOC,UAAY,IACtC,IAAKR,EACYU,aAAY,YAClB,IAAIH,MAAOC,UACPC,GACTd,GAAe,SAACgB,GACd,OAAOA,EAAO,KAGlBF,GAAY,MACX,KAUP,OACE,sBAAKnB,UAAU,eAAf,UACE,oBAAIA,UAAU,QAAd,4BACA,qBAAKsB,IAAKC,EAAUC,IAAI,iBAAiBxB,UAAU,UACnD,cAAC,EAAD,CACEL,MAAO,eACPC,WAAYA,EACZC,KAAM,QACNC,KAAMQ,EACNP,WAAYA,IAGd,sBAAKC,UAAU,kBAAf,UACE,qBAAKA,UAAU,QAAf,SAAwBD,EAAWK,KACnC,wBACEJ,UAAU,oCACVC,QAAS,kBAAMe,GAFjB,SAIGN,EACC,mBAAGV,UAAU,iBAAb,mBAEA,mBAAGA,UAAU,iBAAb,0BAGJ,wBACEA,UAAU,oCACVC,QAhCU,WAChBI,EAAe,MACfE,EAAa,KACbE,EAAe,OA2BX,SAIE,mBAAGT,UAAU,iBAAb,4BAIJ,cAAC,EAAD,CACEL,MAAO,iBACPC,WAAYA,EACZC,KAAM,UACNC,KAAMU,EACNT,WAAYA,QCxFL0B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.c68eac09.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/pomodoro.f308c098.png\";","import React, { FC, useState } from \"react\"\nimport \"./styles.scss\"\nimport pomodoro from \"./pomodoro.png\"\n\ninterface Props {\n  title: string\n  changeTime: (type: string, time: number) => void\n  type: string\n  time: number\n  formatTime: (time: number) => string\n}\n\nconst App: FC = () => {\n  const [displayTime, setDisplayTime] = useState(25 * 60)\n  const [breakTime, setBreakTime] = useState(5 * 60)\n  const [sessionTime, setSessionTime] = useState(25 * 60)\n  const [timerOn, setTimerOn] = useState(false)\n  const [onBreak, setOnBreak] = useState(false)\n\n  const formatTime = (time: number): string => {\n    let minutes = Math.floor(time / 60) + \"\"\n    let seconds = (time % 60) + \"\"\n\n    return `${minutes.padStart(2, \"0\")}:${seconds.padStart(2, \"0\")}`\n  }\n\n  const changeTime = (type: string, time: number) => {\n    if (type === \"break\") {\n      if (breakTime <= 60 && time < 0) {\n        return\n      }\n      setBreakTime(breakTime + time)\n    } else {\n      if (sessionTime <= 60 && time < 0) {\n        return\n      }\n      setSessionTime(sessionTime + time)\n      if (!timerOn) {\n        setDisplayTime(sessionTime + time)\n      }\n    }\n  }\n\n  const controlTime = () => {\n    let date = new Date().getTime()\n    let nextDate = new Date().getTime() + 1000\n    if (!timerOn) {\n      let interval = setInterval(() => {\n        date = new Date().getTime()\n        if (date > nextDate) {\n          setDisplayTime((prev) => {\n            return prev - 1\n          })\n        }\n        nextDate += 1000\n      }, 30)\n    }\n  }\n\n  const resetTime = () => {\n    setDisplayTime(25 * 60)\n    setBreakTime(5 * 60)\n    setSessionTime(25 * 60)\n  }\n\n  return (\n    <div className=\"page-wrapper\">\n      <h1 className=\"title\">Pomodoro Clock</h1>\n      <img src={pomodoro} alt=\"Pomodoro Timer\" className=\"image\" />\n      <Length\n        title={\"Break Length\"}\n        changeTime={changeTime}\n        type={\"break\"}\n        time={breakTime}\n        formatTime={formatTime}\n      />\n\n      <div className=\"timer-container\">\n        <div className=\"timer\">{formatTime(displayTime)}</div>\n        <button\n          className=\"play-pause btn-small red darken-1\"\n          onClick={() => controlTime}\n        >\n          {timerOn ? (\n            <i className=\"material-icons\">pause</i>\n          ) : (\n            <i className=\"material-icons\">play_arrow</i>\n          )}\n        </button>\n        <button\n          className=\"play-pause btn-small red darken-1\"\n          onClick={resetTime}\n        >\n          <i className=\"material-icons\">autorenew</i>\n        </button>\n      </div>\n\n      <Length\n        title={\"Session Length\"}\n        changeTime={changeTime}\n        type={\"session\"}\n        time={sessionTime}\n        formatTime={formatTime}\n      />\n    </div>\n  )\n}\n\nconst Length: FC<Props> = ({ title, changeTime, type, time, formatTime }) => {\n  return (\n    <div className=\"length-container\">\n      <div>{title}</div>\n      <div className=\"time-boxes\">\n        <button\n          className=\"btn-small red darken-1\"\n          onClick={() => changeTime(type, -60)}\n        >\n          <i className=\"material-icons\">arrow_downward</i>\n        </button>\n        <div>{formatTime(time)}</div>\n        <button\n          className=\"btn-small red darken-1\"\n          onClick={() => changeTime(type, 60)}\n        >\n          <i className=\"material-icons\">arrow_upward</i>\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}