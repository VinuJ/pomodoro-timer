{"version":3,"sources":["pomodoro.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Length","title","changeTime","type","time","formatTime","className","onClick","App","useState","displayTime","setDisplayTime","breakTime","setBreakTime","sessionTime","setSessionTime","timerOn","setTimerOn","onBreak","setOnBreak","beep","Audio","useEffect","play","minutes","Math","floor","seconds","padStart","src","pomodoro","alt","Date","getTime","nextDate","interval","setInterval","prev","localStorage","clear","setItem","clearInterval","JSON","parse","getItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ef2e144.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/pomodoro.f308c098.png\";","import React, { FC, useState, useEffect } from \"react\"\r\nimport \"./styles.scss\"\r\nimport pomodoro from \"./pomodoro.png\"\r\n\r\ninterface Props {\r\n  title: string\r\n  changeTime: (type: string, time: number) => void\r\n  type: string\r\n  time: number\r\n  formatTime: (time: number) => string\r\n}\r\n\r\nconst App: FC = () => {\r\n  const [displayTime, setDisplayTime] = useState(25 * 60)\r\n  const [breakTime, setBreakTime] = useState(5 * 60)\r\n  const [sessionTime, setSessionTime] = useState(25 * 60)\r\n  const [timerOn, setTimerOn] = useState(false)\r\n  const [onBreak, setOnBreak] = useState(false)\r\n\r\n  const soundUrl = 'https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav'\r\n  const beep = new Audio(soundUrl)\r\n\r\n  useEffect(() => {\r\n    if (displayTime === 0) {\r\n      beep.play()\r\n      if (!onBreak) {\r\n        setDisplayTime(breakTime)\r\n        setOnBreak(true)\r\n      } else {\r\n        setDisplayTime(sessionTime)\r\n        setOnBreak(false)\r\n      }\r\n    }\r\n  })\r\n\r\n  const formatTime = (time: number): string => {\r\n    let minutes = Math.floor(time / 60) + \"\"\r\n    let seconds = (time % 60) + \"\"\r\n\r\n    return `${minutes.padStart(2, \"0\")}:${seconds.padStart(2, \"0\")}`\r\n  }\r\n\r\n  const changeTime = (type: string, time: number) => {\r\n    if (type === \"break\") {\r\n      if (breakTime <= 60 && time < 0) {\r\n        return\r\n      }\r\n      setBreakTime(breakTime + time)\r\n    } else {\r\n      if (sessionTime <= 60 && time < 0) {\r\n        return\r\n      }\r\n      setSessionTime(sessionTime + time)\r\n      if (!timerOn) {\r\n        setDisplayTime(sessionTime + time)\r\n      }\r\n    }\r\n  }\r\n\r\n  const controlTime = (): void => {\r\n    let date = new Date().getTime()\r\n    let nextDate = new Date().getTime() + 1000\r\n    if (!timerOn) {\r\n      let interval: any = setInterval(() => {\r\n        date = new Date().getTime()\r\n        if (date > nextDate) {\r\n          setDisplayTime((prev) => {\r\n            return prev - 1\r\n          })\r\n          nextDate += 1000\r\n        }\r\n      }, 30)\r\n      localStorage.clear()\r\n      localStorage.setItem(\"interval-id\", interval)\r\n    }\r\n    if (timerOn) {\r\n      clearInterval(JSON.parse(localStorage.getItem(\"interval-id\") || \"{}\"))\r\n    }\r\n\r\n    setTimerOn(!timerOn)\r\n  }\r\n\r\n  const resetTime = (): void => {\r\n    setDisplayTime(25 * 60)\r\n    setBreakTime(5 * 60)\r\n    setSessionTime(25 * 60)\r\n    setTimerOn(false)\r\n    clearInterval(JSON.parse(localStorage.getItem(\"interval-id\") || \"{}\"))\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"page-wrapper\">\r\n      <h1 className=\"title\">Pomodoro Clock</h1>\r\n      <img src={pomodoro} alt=\"Pomodoro Timer\" className=\"image\" />\r\n      <Length\r\n        title={\"Break Length\"}\r\n        changeTime={changeTime}\r\n        type={\"break\"}\r\n        time={breakTime}\r\n        formatTime={formatTime}\r\n      />\r\n\r\n      <div className=\"timer-container\">\r\n        <div className=\"timer\">{formatTime(displayTime)}</div>\r\n        <button\r\n          className=\"play-pause btn-small red darken-1\"\r\n          onClick={controlTime}\r\n        >\r\n          {timerOn ? (\r\n            <i className=\"material-icons\">pause</i>\r\n          ) : (\r\n            <i className=\"material-icons\">play_arrow</i>\r\n          )}\r\n        </button>\r\n        <button\r\n          className=\"play-pause btn-small red darken-1\"\r\n          onClick={resetTime}\r\n        >\r\n          <i className=\"material-icons\">autorenew</i>\r\n        </button>\r\n      </div>\r\n\r\n      <Length\r\n        title={\"Session Length\"}\r\n        changeTime={changeTime}\r\n        type={\"session\"}\r\n        time={sessionTime}\r\n        formatTime={formatTime}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Length: FC<Props> = ({ title, changeTime, type, time, formatTime }) => {\r\n  return (\r\n    <div className=\"length-container\">\r\n      <div>{title}</div>\r\n      <div className=\"time-boxes\">\r\n        <button\r\n          className=\"btn-small red darken-1\"\r\n          onClick={() => changeTime(type, -60)}\r\n        >\r\n          <i className=\"material-icons\">arrow_downward</i>\r\n        </button>\r\n        <div>{formatTime(time)}</div>\r\n        <button\r\n          className=\"btn-small red darken-1\"\r\n          onClick={() => changeTime(type, 60)}\r\n        >\r\n          <i className=\"material-icons\">arrow_upward</i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}